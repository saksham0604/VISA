var showModalBody = false;

$(document).ready(function() {

    $(document).on('click', '.modal__show', function(e) {
        var videoModal = $(this).data("modaltype")==='video'? true : false;
        if(!videoModal){
            e.preventDefault();
            var url = $(this).attr('href') ? encodeURI($(this).attr('href')) : encodeURI($(this).closest('a').attr('href'));
            showHideModal(url);
        }
    });

    function showHideModal(url) {
        $(".modal--body").load(url, hideElements);
    }

    function hideElements() {
        $(this).find(".main_nav_component").addClass("vs-d-none");
        $(this).find("#vs-navigation-header").addClass("vs-d-none");
        $(this).find("#vs-navigation-footer").addClass("vs-d-none");
        $(this).find(".globalAlert").addClass("vs-d-none");
        $(this).find(".footer").addClass("vs-d-none");

        var modalTitle = $(this).find('h1').first().html();
        if(modalTitle){
            modalTitle = sanitize_html(modalTitle, DefaultWhitelist, null);
            $(this).find('h1').first().replaceWith('<h2 class="vs-h2 vs-mb-1 vs-mt-2">' + modalTitle+ '</h2>');
        }
        showModalBody = true;
    }
});

/*

Copyright (C) 2015, Visa
Description - youTube returns only 1 callback when the iframe api is returned and does
  not play well with the widget facory. jQuery widget factory applies the functionality to
  each of the class it was applied to, overwiting the youTube api. Therefor custom js
  is needed to listen for the single youTube api event callback, then pass it all of the
  of the video players.
@author - Razorfish Dev Team
@version - 1.0

*/
var VisaApp = VisaApp || {};
var pauseFlag = false;
var player, timer;
var modalClosed = false;


// Kick it off
$(document).ready(function () {
    $(document).on('click', '.modal__show', function () {
        setTimeout(function () {
            if ($('.vs-video-player').length > 0) {
                if (typeof (YT) == 'undefined' || typeof (YT.Player) == 'undefined' || typeof (VisaApp.VideoPlayer) == 'undefined') {
                    loadPlayer();
                }
                VisaApp.VideoPlayer.init(0);
            }
        }, 2000);
    });
    $(document).on('click', 'button.visa-icon-close', function () {
        if ($('.vs-video-player').length > 0) {
            stopVideo();
        }

    });

    $(document).keydown(function (e) {
        if (e.key === "Escape") {
            if ($('.vs-video-player').length > 0) {
                stopVideo();
            }
        }
    });

    function stopVideo() {
        if (VisaApp.VideoPlayer._player[VisaApp.VideoPlayer.playerIndex]) {
            VisaApp.VideoPlayer._player[VisaApp.VideoPlayer.playerIndex].destroy();
            VisaApp.VideoPlayer._player[VisaApp.VideoPlayer.playerIndex] = null;
        }
    }
    
    function playStateChange(event) {
        curID = event.target.getVideoData().video_id;
        if(event.target.getVideoData())
        {
            curTitle = event.target.getVideoData().title;
        }
        
        //Code for DataLayer implementation for Youtube Video
        if (event.data === 1) { // Started playing
            var timerDict = {}
            timer = setInterval(showPercentage, 500);
        } else {
            clearInterval(timer);
        }
    
        function showPercentage() {
    
            var percent = 0;
            percent = event.target.getCurrentTime();
            var duration = event.target.getDuration();
            percent = Math.round(percent / duration * 100);
    
            switch (percent) {
                case 10:
                    showPer(10);
                    break;
                case 20:
                    showPer(20);
                    break;
                case 30:
                    showPer(30);
                    break;
                case 40:
                    showPer(40);
                    break;
                case 50:
                    showPer(50);
                    break;
                case 60:
                    showPer(60);
                    break;
                case 70:
                    showPer(70);
                    break;
                case 80:
                    showPer(80);
                    break;
                case 90:
                    showPer(90);
    
            }
            function showPer(timer) {
                if (timerDict[timer] != 1) {
                    timerDict[timer] = 1;
                    window.dataLayer.push({ event: 'youtube-event', videoAction: 'progress' + timer + '%', videoId: curID, videoTitle: curTitle });
                    var video_progress_event = new CustomEvent("track_video_progress", {
                        detail: {
                            'event': 'video-event',
                            'videoAction': 'progress' + timer + '%',
                            'videoId': curID,
                            'videoTitle': curTitle
    
                        }
                    });
                    document.dispatchEvent(video_progress_event);
    
                }
            }
        }
        //Code for DataLayer implementation for Youtube Video - Play , Pause and End
        switch(event.data) {
            case 0:	{
                window.dataLayer.push({ event: 'youtube-event', videoAction: 'end', videoId: curID, videoTitle: curTitle });
                var video_finish_event = new CustomEvent("track_video_finish",{
                    detail: {
                        'event': 'video-event',
                        'videoAction': 'finish',
                        'videoId': curID,
                        'videoTitle': curTitle
    
                    }
                });
                document.dispatchEvent(video_finish_event);
                break;
            }
            case 1:
                window.dataLayer.push({ event: 'youtube-event', videoAction: 'play', videoId: curID, videoTitle: curTitle });
                var video_play_event = new CustomEvent("track_video_play",{
                    detail: {
                        'event': 'video-event',
                        'videoAction': 'play',
                        'videoId': curID,
                        'videoTitle': curTitle
    
                    }
                });
                document.dispatchEvent(video_play_event);
                break;
            case 2:
                window.dataLayer.push({ event: 'youtube-event', videoAction: 'pause', videoId: curID, videoTitle: curTitle });
                var video_pause_event = new CustomEvent("track_video_pause",{
                    detail: {
                        'event': 'video-event',
                        'videoAction': 'pause',
                        'videoId': curID,
                        'videoTitle': curTitle
    
                    }
                });
                document.dispatchEvent(video_pause_event);
    
        }
    
        if(event.data === 1) {
            $(".modal").focus();
            var playerContainer = $(event.target.i.closest(".content-video-player"));
            playerContainer.find('.cover').fadeOut();
            playerContainer.find('.topics').fadeOut();
        }
        if(event.data === 0) {
            //this.showTopics();
        }
        if(event.data === 2) {
            $(".modal").focus();
        }
    }

    function loadPlayer() {

        VisaApp.VideoPlayer = {

            options: {
                autoplay: 1
            },

            //_cover: null,
            _video: null,
            element: null,
            playerIndex: null,
            _player: {},
            currentPlayer: null,

            init: function (playerIndex) {
                if (!modalClosed) {
                    if (!this._player[playerIndex]) {
                        var tag = document.createElement('script');
                        var firstScriptTag = document.getElementsByTagName('script')[0];
                        this.element = $('.vs-player-container.youTube');
                        this.element.addClass('vs-video-player');
                        this._video = this.element.data("video");
                        tag.src = "https://www.youtube.com/iframe_api";
                        tag.classList.add('youtube-api');
                        if ($('script.youtube-api').length === 0) {
                            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                        }
                    }
                    this.playerIndex = playerIndex;
                    if (typeof (YT) == 'undefined' || typeof (YT.Player) == 'undefined') {
                        window.onYouTubeIframeAPIReady = this._onYouTubeIframeAPIReady.bind(this);
                        this.additionalEvents.bind(this);
                        if (typeof this.additionalEvents() !== 'undefined') {
                            this.additionalEvents();
                        }
                    } else {
                        this._onYouTubeIframeAPIReady.bind(this);
                        if (typeof this._onYouTubeIframeAPIReady() !== 'undefined') {
                            this._onYouTubeIframeAPIReady();
                        }
                    }
                }

            },

            additionalEvents: function () {
                var gScope = this;
                $('.vs-player-container.youTube').each(function (i) {
                    // For each player, assign click functions
                    var _this = $(this);
                    _this.find('iframe.vs-embed-responsive-item').hide();
                    _this.find('iframe.vs-embed-responsive-item').show();
                    gScope._playClickHandler(gScope._player[i]);

                });
            },

            _onYouTubeIframeAPIReady: function () {
                var gScope = this;
                if (!this._player[gScope.playerIndex]) {
                    var data = {};
                    var playerContainer = $($('.vs-player-container.youTube')[this.playerIndex]);
                    videoId = playerContainer.data("video");
                    data.element = playerContainer.find("#player-" + videoId)[0];
                    data.id = 'player-' + videoId;
                    data.videoId = videoId;

                    var player = this._createPlayer(data);
                    this._player[gScope.playerIndex] = player;
                } else {
                    this._replayClickHandler(this._player[gScope.playerIndex]);
                }
            },

            // Create each player and return it
            _createPlayer: function (playerInfo) {
                player = new YT.Player(playerInfo.element, {
                    videoId: playerInfo.videoId,
                    events: {
                        'onReady': this.playerReady,
                        'onStateChange': this._onPlayerStateChange.bind(this)
                    },
                    playerVars: {
                        'autohide': 1,
                        'autoplay': 1,
                        'color': 'black',
                        'modestbranding': 1,
                        'origin': 'visa.com',
                        'rel': 0,
                        'showinfo': 0,
                        'start': 0,
                        'theme': 'light',
                        'wmode': 'opaque'
                    }
                });
                this.element.find('iframe').removeAttr('frameborder');
                this.element.find('iframe').addClass('vs-embed-responsive-item');
                return player;

            },
            _onPlayerStateChange: playStateChange,

            _playClickHandler: function (player) {
                if (player) {
                    this.playVideo(player);
                } else {
                    return null;
                }
            },

            _replayClickHandler: function (player) {
                this.playVideo(player);
            },

            playerReady: function (event) {
                event.target.playVideo();
            },

            playVideo: function (player) {
                this.element.find('iframe')?.access();
                return this;
            }
        }

    }



});

