  
  function initLazyLoading(){
    var LAZY_CLASS = "vs-lazy";
  var PLACEHOLDER_CLASS = "vs-img-placeholder";

    /**
     * Function to remove lazyness from an image. Puts data-src to src and removes vs-lazy class.
     * @param {JqueryObject} lazyImage
     */
    var removeLazyness = function(lazyImage) {
      let
          src = lazyImage.attr("data-src"),
          bgimage = lazyImage.attr("data-bgimage"),
          video = lazyImage.is("video");

      if (src) {
        lazyImage.attr("src", src);
        lazyImage.removeAttr("data-src");
        lazyImage.removeClass(LAZY_CLASS);
      }
      if (bgimage) {
        lazyImage.css('background-image','url('+bgimage+')');
        lazyImage.removeAttr("data-bgimage");
        lazyImage.removeClass(LAZY_CLASS);
      }
      if (video) {
        if($(window).width() > 600) {
          let source = lazyImage.find("source");
          src = source.attr("data-src");
          source.attr("src", src);
          var firstImage = $(lazyImage).get(0);
          $(firstImage).trigger('load');
          source.removeAttr("data-src");
          lazyImage.removeClass(LAZY_CLASS);
        }
      }
    }
      let
        allLazyImages = $("img." + LAZY_CLASS + "." + PLACEHOLDER_CLASS),
        allLazyBgImages = $(".vs-bg-image." + LAZY_CLASS),
        allLazyVideos = $("video." + LAZY_CLASS),

        disabledLazyImages = $("[data-disable-lazyloading='true'] img." + LAZY_CLASS + "." + PLACEHOLDER_CLASS),
        disabledBgLazyImages = $("[data-disable-lazyloading='true'] .vs-bg-image." + LAZY_CLASS),
        disabledLazyVideos = $("[data-disable-lazyloading='true'] video." + LAZY_CLASS),
        disabledLazyItems = $.merge($.merge(disabledLazyImages, disabledBgLazyImages ), disabledLazyVideos),

        enabledLazyImages = allLazyImages.not(disabledLazyImages),
        enabledBgLazyImages = allLazyBgImages.not(disabledBgLazyImages),
        enabledLazyVideos = allLazyVideos.not(disabledLazyVideos),
        enabledLazyItems = $.merge($.merge(enabledBgLazyImages, enabledLazyImages ), enabledLazyVideos);

    // Remove lazyness of images with disabled lazy loading
    disabledLazyItems.each(function() {
      removeLazyness($(this));
    });

    if ("IntersectionObserver" in window && ('isIntersecting' in IntersectionObserverEntry.prototype)) {
      var lazyImageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
          var lazyImage = $(entry.target);
          if (entry.isIntersecting) {
            removeLazyness(lazyImage);
            lazyImageObserver.unobserve(lazyImage[0]);
          }
        });
      });

      enabledLazyItems.each(function() {
        lazyImageObserver.observe(this);
      });

    } else {
      enabledLazyItems.inview({
        inview: function() {
          removeLazyness($(this));
        }
      });
    }
  
    
  }
(function($) {
  initLazyLoading();

})(jQuery);
